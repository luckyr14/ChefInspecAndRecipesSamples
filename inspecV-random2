 encoding: utf-8
	# Copyright (c) 2017 REAN Cloud (https://www.reancloud.com) All rights reserved
	
	title 'OH12-1X-000350: OHS must have the permissions set properly via the Directory directive accompanying the ErrorDocument directives to minimize improper access to the warning and error messages displayed to clients.'
	
	#### SRG-APP-000266-WSR-000159 ####
	#
	# OHS must have the permissions set properly via the Directory directive accompanying the ErrorDocument directives to minimize improper access to the warning and error messages displayed to clients.
	#
	# STIG ID: OH12-1X-000350
	# Rule ID: SV-78975r1_rule
	# Vuln ID: V-64485
	# Severity: CAT II
	# Related:
	# - CCI-001312
	#
	## Discussion ##
	#
	# Information needed by an attacker to begin looking for possible
	# vulnerabilities in a web server includes any information about the web server,
	# backend systems being accessed, and plug-ins or modules being used.
	#
	#
	# Web servers will often display error messages to client users displaying
	# enough information to aid in the debugging of the error. The information given
	# back in error messages may display the web server type, version, patches
	# installed, plug-ins and modules installed, type of code being used by the
	# hosted application, and any backends being used for data storage.
	#
	#
	# This information could be used by an attacker to blueprint what type of
	# attacks might be successful. The information given to users must be minimized
	# to not aid in the blueprinting of the web server.
	#
	#
	## Check ##
	#
	# 1. Open
	# $DOMAIN_HOME/config/fmwconfig/components/OHS/<componentName>/httpd.conf and
	# every .conf file (e.g., ssl.conf) included in it with an editor.
	#
	#
	# 2. Search for the "Directory
	# "${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/{COMPONENT_NAME}/error""
	# directive at the OHS server and virtual host configuration scopes.
	#
	#
	# 3. If the directive is omitted, this is a finding.
	#
	# 4. Validate that the folder where the directive is pointing is valid. If the
	# folder is not valid, this is a finding.
	#
	#
	## Fix ##
	#
	# 1. Open
	# $DOMAIN_HOME/config/fmwconfig/components/OHS/<componentName>/httpd.conf and
	# every .conf file (e.g., ssl.conf) included in it with an editor.
	#
	#
	# 2. Search for the "Directory
	# "${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/{COMPONENT_NAME}/error""
	# directive at the OHS server and virtual host configuration scopes.
	#
	#
	# 3. Set the "Directory" directive to
	# "${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/{COMPONENT_NAME}/error"",
	# add the directive if it does not exist.
	#
	#
	# 4a. Within the "Directory
	# "${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/{COMPONENT_NAME}/error""
	# directive, set the "AllowOverride" directive to "None", add the directive if
	# it does not exist.
	#
	# 4b. Within the "Directory
	# "${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/{COMPONENT_NAME}/error""
	# directive, set the "Options" directive to "None", add the directive if it does
	# not exist.
	#
	# 4c. Within the "Directory
	# "${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/{COMPONENT_NAME}/error""
	# directive, set the "Order" directive to "allow, deny", add the directive if it
	# does not exist.
	#
	# 4d. Within the "Directory
	# "${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/{COMPONENT_NAME}/error""
	# directive, set the "Allow" directive to "from all", add the directive if it
	# does not exist.
	#
	# 4e. Within the "Directory
	# "${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/{COMPONENT_NAME}/error""
	# directive, set the "<LimitExcept>" directive to "GET POST", add the directive
	# if it does not exist.
	#
	# 4e1. Within the "<LimitExcept GET POST>" directive, set the "Deny" directive
	# to "from all", add the directive if it does not exist.
	#
	#
	######
	
	
	domian_home = attribute("domains_home", description: "value of domains_home")
	domain_components = attribute("domain_components", description: "value of domain_components")
	
	stig_control "OH12-1X-000350" do
	domain_components.each do |domain_name, components|
	domain_ohs_path = "#{domian_home}\\#{domain_name}\\config\\fmwconfig\\components\\OHS"
	components ||= []
	components.each do |compName|
	file_path = "#{domain_ohs_path}\\#{compName}\\httpd.conf"
	conf = conf_reader(file_path)
	(conf.conf_file_paths).each do |cfile_path|
	describe file(cfile_path) do
	its('content') {should match /^[\s]*[\<]Directory[\s].*[\/]error[\"][\>]/}
	end
	end
	error_dir_value = '"${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/{COMPONENT_NAME}/error"'
	file_positions = conf.search_files('Directory', Regexp.escape(error_dir_value))
	file_positions.each do |cfile_path, positions|
	describe cfile_path do
	subject do
	parse_config(file(cfile_path).content.lines[positions[0]...positions[1]].join,
	{assignment_regex: /^\s*(.*?)\s+(.*?)\s*$/})
	end
	its('AllowOverride') { should eq 'None'}
	its('Options') {should eq 'None'}
	its('Order') {should =~ /allow[\s]*,[\s]*deny/}
	its('Allow') { should eq 'from all'}
	its('<LimitExcept') {should =~ /GET[\s]+POST/}
	it "LimitExcept should have Deny from all" do
	expect(subject.params['<LimitExcept']).to cmp /GET[\s]+POST[\s]*>/
	expect(subject.params['Deny']).to cmp /from[\s]*all/
	# check if "Deny from all" exists inside <LimitExcept GET POST></LimitExcept>
	start_index, end_index = 0, 0
	lines = file(cfile_path).content.lines
	puts "+++++++++++++++++++++++"
	puts lines[positions[0]]
	(positions[0]...positions[1]).each do |index|
	start_index = index if /<LimitExcept[\s]*GET[\s]+POST/.match lines[index]
	end_index = index if /<\/LimitExcept[\s]*>/.match lines[index]
	end
	#expect(lines[start_index...end_index].grep(/Deny[\s]*from all/).any?).to be true
	expect(lines[start_index...end_index].grep(/^[\s]*Deny[\s]*from[\s]+all/).any?).not_to be nil
	end
	end
	end
	end
